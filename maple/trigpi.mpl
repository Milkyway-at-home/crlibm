Digits := 120:
#interface(quiet=true):
read "common-procedures.mpl":
read "triple-double.mpl":
with(orthopoly):
mkdir("TEMPTRIG"):

smallest := 2^(-1023) * 1 * 2^(-51):
oneover256:=1/256:
twoPowerm124:=2^(-124):
twoPower124:=2^(124):
twoPower950:=2^950:
maxepstotalSinCos:=2^(-60):
rnconstantSinCos := evalf(compute_rn_constant(maxepstotalSinCos)):

xmax_return_pix_for_sin := (2^(-26))/Pi:


SinCosSize:= 128: # size f the table

xMaxSinPix:=2^(-6):
degreePolySinPix:=10:
polySinPix:=convert(numapprox[minimax](sin(Pi*sqrt(y))/sqrt(y),y=10^(-16)..xMaxSinPix,[degreePolySinPix,0],1),polynom);
polyTs := poly_exact32(expand(subs(y=x^2, polySinPix)),3,7):
epsilonApproxSinPix:= numapprox[infnorm]((x*polyTs - sin(Pi*x))/sin(Pi*x), x=10^(-10)..xMaxSinPix):
log2(%);

xMaxCosPix:=2^(-6):
degreePolyCosPix:=13:
polyCosPix:=convert(numapprox[minimax](cos(Pi*x),x=10^(-16)..xMaxCosPix,[degreePolyCosPix,0],1),polynom):
polyTc := poly_exact2(polyCosPix,13);
epsilonApproxCosPix:= numapprox[infnorm]((polyTc - cos(Pi*x))/cos(Pi*x),x=10^(-16)..xMaxCosPix):
log2(%);


outputHighPart:=proc(cvarname, var)
  local varMinusLSB:
  Digits:=8:
  varMinusLSB:=var/(1+2^(-20)):
  ("#define " || cvarname || " 0x" || (ieeehexa(varMinusLSB)[1])
    ||  "        /* " || (convert(evalf(varMinusLSB),string)) ||  " */" )
end proc:


filename:="TEMPTRIG/trigpi.h":
fd:=fopen(filename, WRITE, TEXT):

fprintf(fd, "#include \"crlibm.h\"\n#include \"crlibm_private.h\"\n"):
fprintf(fd, "\n/*File generated by maple/trigo.pl*/\n"):
fprintf(fd, "#define ONEOVER256        %1.25f \n", oneover256):
fprintf(fd, "\n"):
fprintf(fd, "#define TWOPOWERM124        %1.50f \n", twoPowerm124):
fprintf(fd, "\n"):
fprintf(fd, "#define TWOPOWER124        %1.25f \n", twoPower124):
fprintf(fd, "\n"):
fprintf(fd, "#define TWOPOWER950        %1.25f \n", twoPower950):
fprintf(fd, "\n"):
fprintf(fd, "#define SMALLEST %1.50e\n",smallest):
fprintf(fd, "\n"):
fprintf(fd, "#define RN_CST_SINCOS  %1.25f \n", rnconstantSinCos):
fprintf(fd, "\n"):
fprintf(fd, "#define RDROUNDCST %1.50e\n", maxepstotalSinCos):
fprintf(fd, "\n"):

fprintf(fd,  "%s\n",  outputHighPart("XMAX_RETURN_PIX_FOR_SIN", xmax_return_pix_for_sin) ):
fprintf(fd, "\n"):

fprintf(fd,"#ifdef WORDS_BIGENDIAN\n"):
for isbig from 1 to 0 by -1 do

  if(isbig=0) then
    fprintf(fd,"#else\n"):
  fi:

  pih, pim, pil := hi_mi_lo(Pi):
  fprintf(fd, "static db_number const pi_hi = "):
  printendian(fd, pih, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const pi_mi = "):
  printendian(fd, pim, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const pi_lo = "):
  printendian(fd, pil, isbig):
  fprintf(fd, ";\n"):



  s0h, s0m, s0l := hi_mi_lo(coeff(polyTs,x,0)):
  fprintf(fd, "static db_number const s0h = "):
  printendian(fd, s0h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s0m = "):
  printendian(fd, s0m, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s0l = "):
  printendian(fd, s0l, isbig):
  fprintf(fd, ";\n"):
  s2h, s2m, s2l := hi_mi_lo(coeff(polyTs,x,2)):
  fprintf(fd, "static db_number const s2h = "):
  printendian(fd, s2h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s2m = "):
  printendian(fd, s2m, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s2l = "):
  printendian(fd, s2l, isbig):
  fprintf(fd, ";\n"):
  s4h, s4l := hi_lo(coeff(polyTs,x,4)):
  fprintf(fd, "static db_number const s4h = "):
  printendian(fd, s4h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s4l = "):
  printendian(fd, s4l, isbig):
  fprintf(fd, ";\n"):
  s6h, s6l := hi_lo(coeff(polyTs,x,6)):
  fprintf(fd, "static db_number const s6h = "):
  printendian(fd, s6h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s6l = "):
  printendian(fd, s6l, isbig):
  fprintf(fd, ";\n"):
  s8h, s8l := hi_lo(coeff(polyTs,x,8)):
  fprintf(fd, "static db_number const s8h = "):
  printendian(fd, s8h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s8l = "):
  printendian(fd, s8l, isbig):
  fprintf(fd, ";\n"):
  s10h, s10l := hi_lo(coeff(polyTs,x,10)):
  fprintf(fd, "static db_number const s10h = "):
  printendian(fd, s10h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s10l = "):
  printendian(fd, s10l, isbig):
  fprintf(fd, ";\n"):
  s12h, s12l := hi_lo(coeff(polyTs,x,12)):
  fprintf(fd, "static db_number const s12h = "):
  printendian(fd, s12h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s12l = "):
  printendian(fd, s12l, isbig):
  fprintf(fd, ";\n"):
  s14h, s14l := hi_lo(coeff(polyTs,x,14)):
  fprintf(fd, "static db_number const s14h = "):
  printendian(fd, s14h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s14l = "):
  printendian(fd, s14l, isbig):
  fprintf(fd, ";\n"):
  s16h, s16l := hi_lo(coeff(polyTs,x,16)):
  fprintf(fd, "static db_number const s16h = "):
  printendian(fd, s16h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s16l = "):
  printendian(fd, s16l, isbig):
  fprintf(fd, ";\n"):
  s18h, s18l := hi_lo(coeff(polyTs,x,18)):
  fprintf(fd, "static db_number const s18h = "):
  printendian(fd, s18h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s18l = "):
  printendian(fd, s18l, isbig):
  fprintf(fd, ";\n"):
  s20h, s20l := hi_lo(coeff(polyTs,x,20)):
  fprintf(fd, "static db_number const s20h = "):
  printendian(fd, s20h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const s20l = "):
  printendian(fd, s20l, isbig):
  fprintf(fd, ";\n"):

  c0h, c0l := hi_lo(coeff(polyTc,x,0)):
  fprintf(fd, "static db_number const c0h = "):
  printendian(fd, c0h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c0l = "):
  printendian(fd, c0l, isbig):
  fprintf(fd, ";\n"):
  c1h, c1l := hi_lo(coeff(polyTc,x,1)):
  fprintf(fd, "static db_number const c1h = "):
  printendian(fd, c1h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c1l = "):
  printendian(fd, c1l, isbig):
  fprintf(fd, ";\n"):
  c2h, c2l := hi_lo(coeff(polyTc,x,2)):
  fprintf(fd, "static db_number const c2h = "):
  printendian(fd, c2h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c2l = "):
  printendian(fd, c2l, isbig):
  fprintf(fd, ";\n"):
  c3h, c3l := hi_lo(coeff(polyTc,x,3)):
  fprintf(fd, "static db_number const c3h = "):
  printendian(fd, c3h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c3l = "):
  printendian(fd, c3l, isbig):
  fprintf(fd, ";\n"):
  c4h, c4l := hi_lo(coeff(polyTc,x,4)):
  fprintf(fd, "static db_number const c4h = "):
  printendian(fd, c4h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c4l = "):
  printendian(fd, c4l, isbig):
  fprintf(fd, ";\n"):
  c5h, c5l := hi_lo(coeff(polyTc,x,5)):
  fprintf(fd, "static db_number const c5h = "):
  printendian(fd, c5h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c5l = "):
  printendian(fd, c5l, isbig):
 fprintf(fd, ";\n"):
  c6h, c6l := hi_lo(coeff(polyTc,x,6)):
  fprintf(fd, "static db_number const c6h = "):
  printendian(fd, c6h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c6l = "):
  printendian(fd, c6l, isbig):
  fprintf(fd, ";\n"):
  c7h, c7l := hi_lo(coeff(polyTc,x,7)):
  fprintf(fd, "static db_number const c7h = "):
  printendian(fd, c7h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c7l = "):
  printendian(fd, c7l, isbig):
  fprintf(fd, ";\n"):
  c8h, c8l := hi_lo(coeff(polyTc,x,8)):
  fprintf(fd, "static db_number const c8h = "):
  printendian(fd, c8h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c8l = "):
  printendian(fd, c8l, isbig):
  fprintf(fd, ";\n"):
  c9h, c9l := hi_lo(coeff(polyTc,x,9)):
  fprintf(fd, "static db_number const c9h = "):
  printendian(fd, c9h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c9l = "):
  printendian(fd, c9l, isbig):
  fprintf(fd, ";\n"):
  c10h, c10l := hi_lo(coeff(polyTc,x,10)):
  fprintf(fd, "static db_number const c10h = "):
  printendian(fd, c10h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c10l = "):
  printendian(fd, c10l, isbig):
  fprintf(fd, ";\n"):
  c11h, c11l := hi_lo(coeff(polyTc,x,11)):
  fprintf(fd, "static db_number const c11h = "):
  printendian(fd, c11h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c11l = "):
  printendian(fd, c11l, isbig):
  fprintf(fd, ";\n"):
  c12h, c12l := hi_lo(coeff(polyTc,x,12)):
  fprintf(fd, "static db_number const c12h = "):
  printendian(fd, c12h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c12l = "):
  printendian(fd, c12l, isbig):
  fprintf(fd, ";\n"):
  c13h, c13l := hi_lo(coeff(polyTc,x,13)):
  fprintf(fd, "static db_number const c13h = "):
  printendian(fd, c13h, isbig):
  fprintf(fd, ";\n"):
  fprintf(fd, "static db_number const c13l = "):
  printendian(fd, c13l, isbig):
  fprintf(fd, ";\n"):
od:
fprintf(fd,"#endif /* WORDS_BIGENDIAN */\n\n\n"):



# Table
fprintf(fd, "typedef struct tPi_t_tag {double hi; double mi; double lo;} tPi_t;\n");
fprintf(fd, "static const tPi_t sincosTable[%d] =\n{\n",  (SinCosSize+2)):
for i from 0 to SinCosSize/2 do
    sh,sm,sl:=hi_mi_lo(sin(i*Pi/(2*SinCosSize))):
    ch,cm,cl:=hi_mi_lo(cos(i*Pi/(2*SinCosSize))):
    fprintf(fd, "  { \n"):
    fprintf(fd, "    %1.50e, /* sin([%d]*pi/256) */ \n", sh, i):
    fprintf(fd, "    %1.50e, \n", sm):
    fprintf(fd, "    %1.50e, \n", sl):
    fprintf(fd, "  } "):
    fprintf(fd, ", \n"):
    fprintf(fd, "  { \n"):
    fprintf(fd, "    %1.50e, /* cos([%d]*pi/256) */ \n", ch, i):
    fprintf(fd, "    %1.50e, \n", cm):
    fprintf(fd, "    %1.50e, \n", cl):
    fprintf(fd, "  } "):
    if(i<SinCosSize/2) then  fprintf(fd, ", \n"): fi
od:
fprintf(fd, "}; \n \n"):



fclose(fd):

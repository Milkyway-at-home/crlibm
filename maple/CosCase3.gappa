yh = <float64ce>(yy);
yl = yy - yh;
sah = <float64ce>(sa);
sal = sa - sah;
cah = <float64ce>(ca);
cal = ca - cah;

# constantes
s3 = -6004799503160661b-55;
s5 = +4803839602528529b-59;
s7 = -7320136537186330b-65;
s9 = +6506788033054516b-71;
c2 = -4503599627370496b-53;
c4 = +6004799503154328b-57;
c6 = -6405110857547344b-62;
c8 = +7320136537186330b-68;

# yh2 = yh * yh;
yh2 = <float64ce>(yh * yh);

# Mul12(&sahyh_h, &sahyh_l, sah, yh);
sahyh = sah * yh;
sahyh_h = <float64ce>(sahyh);
sahyh_l = sahyh - sahyh_h;

# ts = yh2 * (s3.d + yh2*(s5.d + yh2*s7.d));
# /* (1+ts)*(yh+yl) is an approx to sin(yh+yl) */
ts = <float64ce>(yh2 * <float64ce>(s3 + <float64ce>(yh2 * <float64ce>(s5 + <float64ce>(yh2 * s7)))));

# tc = yh2 * (c2.d + yh2*(c4.d + yh2*c6.d));
# /* 1+tc is an approx to cos(yh+yl) */
tc = <float64ce>(yh2 * <float64ce>(c2 + <float64ce>(yh2 * <float64ce>(c4 + <float64ce>(yh2 * c6)))));

# Add12(thi, tlo, cah, -sahyh_h);
t = cah - sahyh_h;
thi = <float64ce>(t);
tlo1 = t - thi;

# tlo = tc*cah - (ts*sahyh_h - (cal + (tlo - (sahyh_l + (sal*yh + sah*yl)))));
tlo = <float64ce>(<float64ce>(tc * cah) - <float64ce>(<float64ce>(ts * sahyh_h)
 - <float64ce>(cal + <float64ce>(tlo1 - <float64ce>(sahyh_l
 + <float64ce>(<float64ce>(sal * yh) + <float64ce>(sah * yl)))))));
tlo_r = tc * cah - (ts * sahyh_h - (cal + (tlo1 - (sahyh_l + (sal * yh + sah * yl)))));

# Add12(*reshi, *reslo, thi, tlo);
res = thi + tlo;

{
  yy in [0,0.0061359231515] /\ ca in [0,1] /\ sa in [0,1] ->
#  thi in ? /\ tlo1 in ?
#  tlo_r - tlo in ?
#  yh2 in ? /\ tc in ? /\ cal in ? /\ tc * cal in ?
#  tc * cal - sal * yl - ts * (sahyh_l + sah * yl + sal * yh + sal * yl) in ?
  res - ((1 + tc) * ca - (1 + ts) * sa * yy) in ?
}

res - ((1 + tc) * ca - (1 + ts) * sa * yy) ->
  tlo - tlo_r + (tc * cal - sal * yl - ts * (sahyh_l + sah * yl + sal * yh + sal * yl));

<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="0"/><View-Properties><Zoom percentage="100"/></View-Properties><Styles><Layout leftmargin="0.0" name="_pstyle49" rightmargin="0.0"/><Layout alignment="left" bullet="none" name="Heading 2" spaceabove="8.0" spacebelow="2.0"/><Layout alignment="left" bullet="none" name="Heading 1" spaceabove="8.0" spacebelow="4.0"/><Layout leftmargin="0.0" name="_pstyle47" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle45" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle42" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle41" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle82" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle81" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle80" rightmargin="0.0"/><Layout leftmargin="0.0" name="Normal" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle39" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle38" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle36" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle35" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle33" rightmargin="0.0"/><Layout leftmargin="0.0" name="_pstyle32" rightmargin="0.0"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" italic="false" name="_cstyle16" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" readonly="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" italic="false" name="_cstyle14" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="_cstyle13" readonly="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="_cstyle504" readonly="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" italic="false" name="_cstyle10" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="false" executable="false" family="Lucida Bright" foreground="[0,0,0]" italic="false" name="Text" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" italic="false" name="ParagraphStyle8" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" family="Serif" name="Heading 2" opaque="false" size="16"/><Font background="[0,0,0]" bold="true" family="Serif" name="Heading 1" opaque="false" size="18"/><Font background="[0,0,0]" executable="false" family="Lucida Bright" name="_pstyle42" readonly="false"/><Font background="[0,0,0]" bold="false" executable="false" family="Lucida Bright" foreground="[0,0,0]" italic="false" name="_pstyle80" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="_cstyle496" readonly="false"/><Font background="[0,0,0]" bold="false" executable="false" family="Lucida Bright" foreground="[0,0,0]" italic="false" name="_pstyle39" readonly="false" size="12" underline="false"/><Font background="[0,0,0]" executable="false" family="Lucida Bright" name="Page Number" readonly="false" underline="false"/><Font background="[0,0,0]" executable="false" family="Lucida Bright" name="_cstyle494" readonly="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="_cstyle492" readonly="false"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="_pstyle33" readonly="false"/></Styles><Page-Numbers enabled="false" first-number="1" first-numbered-page="1" horizontal-location="right" style="Page Number" vertical-location="bottom"/><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">restart:
Digits := 200:</Text-field></Input><Input><Text-field layout="_pstyle33" prompt="&gt; " style="_pstyle33">with (numapprox):<Font italic="false" size="12" underline="false">with(orthopoly):</Font></Text-field></Input><Input><Text-field layout="_pstyle33" prompt="&gt; " style="_pstyle33">read "Common_maple_procedures.m";
mkdir("TEMPLOG");</Text-field></Input></Group><Section collapsed="true"><Title><Text-field layout="Heading 1" style="Heading 1">Second, accurate phase in SCS</Text-field></Title><Group><Input><Text-field layout="_pstyle41" style="_cstyle494">Approach for the scs function:</Text-field><Text-field layout="_pstyle42" style="_pstyle42"/><Text-field layout="_pstyle41" style="_cstyle494"> x=2^e (1+f)
 log(x) = e.log(2) + log(1+f)

  log(1+f) = log(w) + log(1+(1+f-w)/w)
</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">W := 2^5:</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Poly_P := series((ln(1+x)/ln(2.))/x, x=0, 45):
Poly_Q := convert(Poly_P,polynom):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Poly_cheb := chebpade(Poly_Q, x=-1/W..1/W, [19,0]):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Poly_Res  := sort(expand(x * Poly_cheb)):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log2(infnorm((1-(expand(Poly_Res))/(ln(1+x)/ln(2.))), x=-1/W..1/W));</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle41" style="_cstyle494">This procedure gives under a polynom form value needed by tabular range reduction for the logarithm.
DON'T forget the zero !!!!
</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Digits       := 50:  
table_ti     := 0:
table_inv_wi := 0:
N            := -4:   
break_point  := sqrt(2.):
start_nb     := round((break_point/2) * 2.^(-N))*2.^(N):
nb_turn      := round((break_point/2) * 2.^(-N)): 

for i from 0 to nb_turn do
   table_ti := table_ti * x + log(start_nb):
   table_inv_wi := table_inv_wi *x + 1./ start_nb:
   start_nb := start_nb + 2.^(N):
od:</Text-field></Input></Group></Section><Section><Title><Text-field layout="Heading 1" style="Heading 1">First, quick phase</Text-field></Title><Text-field layout="Normal" style="Text"/><Group><Input><Text-field layout="Normal" style="Text">Approach for the first function:</Text-field><Text-field layout="Normal" style="Text">log(x) = E*log(2) + P(R)
where P(R) is defined over such an interval [11/16; 12/16] ... [21/16; 23/16]
At all, there is 8 intervals, corresponding to 8 polynomials.</Text-field><Text-field layout="Normal" style="Text"/></Input></Group><Section collapsed="true"><Title><Text-field layout="Heading 2" style="Heading 2">Polynomials</Text-field></Title><Group><Input><Text-field layout="Normal" style="Text">In the following, Polyn is the n-th polynomial in infinite precision,
and Pn is the corresponding truncated polynomial

Sorry, it's not a loop because there is a little bit of hand-tuning in P3</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 0</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Pser:=series((log(x)/log(2))/(x),x=23/32,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=11/16..12/16, [12,0]):
Poly0:= sort(expand(x * Poly_cheb)):
Poly0:=sort(expand(subs(x=x+23/32,Poly0))):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly0))/(ln(23/32+x)/log(2.))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">P0:=poly_exact2(Poly0*ln(2.),2):
err0:=log(infnorm((1-(expand(P0))/(ln(23/32+x))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 1</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Pser:=series((log(x)/ln(2.))/x,x=25/32,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=12/16.. 13/16, [12,0]):
Poly1:= sort(expand(x * Poly_cheb)):
Poly1:=sort(expand(subs(x=x+25/32,Poly1))):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly1))/(ln(x+25/32))*ln(2.)), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle45" prompt="&gt; " style="_cstyle504">P1:=poly_exact2(Poly1*ln(2.),2):
err1:=log(infnorm((1-(expand(P1))/(ln(25/32+x))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 2</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Pser:=series((log(x)/log(2))/x,x=27/32,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=13/16.. 14/16, [12,0]):
Poly2:= sort(expand(x * Poly_cheb)):
Poly2:=sort(expand(subs(x=x+27/32,Poly2))):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly2))/(ln(27/32+x)/ln(2.))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">P2:=poly_exact2(Poly2*ln(2.),2):
err2:=log(infnorm((1-(expand(P2))/(ln(27/32+x))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 3</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle36" prompt="&gt; " style="_cstyle10">a,b:=hi_lo(log(29/32)):
ap, bp:=hi_lo(32/29):
P_cheb:=chebpade((log(x)-a-b)/x, x=14/16..15/16,[11,0]):
Poly3:=sort(expand(P_cheb*x + a+b)):
Poly3:=subs(x=x+29/32, Poly3):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly3))/(ln(x+29/32))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">P3:=poly_exact2(Poly3,2):
err3:=log(infnorm((1-(expand(P3))/(ln(x+29/32))), x=-1/32..1/32))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 4</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Pser:=series((log(1+x)/log(2))/x,x=0,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=-1/16 .. 1/16, [12,0]):
Poly4:= sort(expand(x * Poly_cheb)):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly4))/(ln(1+x)/ln(2.))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">P4:=poly_exact2(Poly4*log(2.),2):
err4:=log(infnorm((1-(expand(P4))/(ln(1+x))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 5</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle45" prompt="&gt; " style="_cstyle504">Pser:=series((log(x)/log(2.))/x,x=18/16,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=17/16..19/16, [12,0]):
Poly5:= sort(expand(x * Poly_cheb)):
Poly5:=sort(expand(subs(x=x+18/16,Poly5)*log(2.))):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle45" prompt="&gt; " style="_cstyle504">log(infnorm((1-(expand(Poly5))/(ln(18/16+x))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle45" prompt="&gt; " style="_cstyle504">P5:=poly_exact2(Poly5,2):
err5:=log(infnorm((1-(expand(P5))/(ln(18/16+x))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 6</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">Pser:=series((log(x)/x),x=20/16,100):
Pse:=convert(Pser,polynom):
Poly_cheb := chebpade(Pse, x=19/16.. 21/16, [12,0]):
Poly6:= sort(expand(x * Poly_cheb)):
Poly6:=sort(expand(subs(x=x+20/16,Poly6))):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle32" prompt="&gt; " style="_cstyle492">log(infnorm((1-(expand(Poly6))/(ln(20/16+x))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">P6:=poly_exact2(Poly6,2):
err6:=log(infnorm((1-(expand(P6))/(ln(x+20/16))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Polynom 7</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">Pser:=series((log(22/16+x)/log(2)),x=0,100):
Pse:=convert(Pser,polynom):
Poly7 := chebpade(Pse, x=-1/16..1/16, [13,0]):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle38" prompt="&gt; " style="_cstyle496">log(infnorm((1-(expand(Poly7))/(ln(22/16+x)/ln(2.))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle45" prompt="&gt; " style="_cstyle504">P7:=poly_exact2(Poly7*log(2.),2):
err7:=log(infnorm((1-(expand(P7))/(ln(x+22/16))), x=-1/16..1/16))/log(2.);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">In the following we use Plist</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle47" prompt="&gt; " style="_cstyle16">Plist:=[P0, P1, P2, P3, P4, P5, P6, P7]:
save P0, P1, P2, P3, P4, P5, P6, P7, Plist, "TEMPLOG/Polylog.m";</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">err:=[err0, err1, err2, err3, err4, err5, err6, err7]:
errapprox:=[]:
for i from 1 to 8 do
  errapprox:=[op(errapprox),2**(err[i])]:
od:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">save err0, err1, err2, err3, err4, err5, err6, err7, err, errapprox, "TEMPLOG/errapproxlog.m";</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text"/></Input></Group></Section><Section collapsed="true"><Title><Text-field layout="Heading 2" style="Heading 2">Interval parameters</Text-field></Title><Text-field layout="Normal" style="Text"/><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">read "TEMPLOG/Polylog.m"; read "TEMPLOG/errapproxlog.m";
Xmax:=[2**(-5), 2**(-5), 2**(-5), 2**(-5), 2**(-4), 2**(-4), 2**(-4), 2**(-4)]:
Ilist:=[[11/16,12/16],[12/16,13/16],[13/16,14/16],[14/16,15/16],[15/16,17/16],[17/16,19/16],[19/16,21/16],[21/16,23/16]]:
midI:=[23/32,25/32,27/32,29/32,1,18/16,20/16,22/16]:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">save Xmax, Ilist, midI, Plist, errapprox, "TEMPLOG/parameterlog.m";</Text-field></Input></Group></Section><Section collapsed="true"><Title><Text-field firstindent="0.0" layout="Heading 2" leftmargin="0.0" linespacing="0.0" rightmargin="0.0" style="Heading 2"><Font executable="false" foreground="[0,0,0]" italic="false" underline="false">Degugging aid</Font></Text-field></Title><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">read "TEMPLOG/Polylog.m"; read "TEMPLOG/errapproxlog.m"; read "TEMPLOG/parameterlog.m";</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle36" prompt="&gt; " style="_cstyle10">P:=P1:
c0:= coeff(P,x,0):
c0hi:=evalf(IEEEdouble(c0)[2]*2**(IEEEdouble(c0)[1]));
c0hie:=IEEEdouble(c0hi):
c0lo:=evalf(IEEEdouble(c0-c0hi)[2]*2**(IEEEdouble(c0-c0hi)[1]));
c0lie:=IEEEdouble(c0lo):


c1:= coeff(P,x,1):
c1hi:=evalf(IEEEdouble(c1)[2]*2**(IEEEdouble(c1)[1]));
c1hie:=IEEEdouble(c0hi);
c1lo:=evalf(IEEEdouble(c1-c1hi)[2]*2**(IEEEdouble(c1-c1hi)[1]));
c1lie:=IEEEdouble(c1lo);

c:= coeff(P,x,2);
c2:=IEEEdouble(c);

c:= coeff(P,x,3);
c3:=IEEEdouble(c);

c:= coeff(P,x,4);
c4:=IEEEdouble(c);

c:= coeff(P,x,5);
c5:=IEEEdouble(c);

c:= coeff(P,x,6);
c6:=IEEEdouble(c);

c:= coeff(P,x,7);
c7:=IEEEdouble(c);

c:= coeff(P,x,8);
c8:=IEEEdouble(c);

c:= coeff(P,x,9);
c9:=IEEEdouble(c);

c:= coeff(P,x,10);
c10:=IEEEdouble(c);

c:= coeff(P,x,11);
c11:=IEEEdouble(c);

c:= coeff(P,x,12);
c12:=IEEEdouble(c);

c:= coeff(P,x,13);
c13:=IEEEdouble(c);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">evalf(2**(-4));</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">for i from 1 to 8 do
 P:=op(i, Plist):
 print(evalf(coeff(P,x,0))):
 print(evalf(coeff(P,x,1)));
od: </Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="_pstyle39" style="_pstyle39"/><Text-field layout="_pstyle35" style="Text">Ecrit dans un fichier en "latex" le resultat de la procedure IEEEdouble</Text-field><Text-field layout="_pstyle39" style="_pstyle39"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="_pstyle36" prompt="&gt; " style="_cstyle10">affiche:=proc(cieee,ffd)
local a,bup,bdown,c:
 
  a:=convert(cieee[1],string);
  bup:=convert(op(1,cieee[2]),string):
  if (op(1,cieee[2]) = cieee[2]) then
    c:=convert(cieee[3], string):
    fprintf(ffd,"$ %s, %s, %s$ ys \n",a,bup,c);
  else
    bdown:=convert(op(2,cieee[2]),string);
    c:=convert(cieee[3], string):
    fprintf(ffd,"$ %s, \\frac{%s}{%s}, %s$ ys \n",a,bup,bdown,c);
  fi;
end proc:</Text-field></Input></Group></Section><Section collapsed="true"><Title><Text-field firstindent="0.0" layout="Heading 2" leftmargin="0.0" linespacing="0.0" rightmargin="0.0" style="Heading 2">Rounding errors</Text-field></Title><Group><Input><Text-field layout="_pstyle35" style="Text"><Font encoding="ISO8859-1">Calcule l'erreur commise a chaque op\351ration du calcul du polyn\364me:</Font>
si la taille de l'intervalle est 2**(-4), alors marge = 5, si c'est 2**(-3)n, alors, marge vaut 4.</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle49" prompt="&gt; " style="Maple Input">read "TEMPLOG/Polylog.m"; read "TEMPLOG/errapproxlog.m"; read "TEMPLOG/parameterlog.m";
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">Compute a table containing the rounding polynomial evaluation error
ErrTruncPoly returns [relative error, log2(relative error), log2(relative error+53)]</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">errrounding:=[]:
for i from 1 to 8 do
  err:=(ErrTruncPoly(Plist[i], Xmax[i], 2))[1]:
  errrounding:=[op(errrounding), err]:
od:
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"><Font opaque="false">save errrounding, "TEMPLOG/errroundinglog.m";</Font></Text-field></Input></Group><Group><Input><Text-field layout="Normal" style="Text">compute delta[], a table of total error,  and tabrndcst[] the table of "e" needed for round to nearest</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">read "TEMPLOG/Polylog.m"; read "TEMPLOG/errapproxlog.m"; read "TEMPLOG/parameterlog.m";read "TEMPLOG/errroundinglog.m";</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">tabrndcst:=[]:
tabk:=[]:
tabdelta:=[]:
for i from 1 to 8 do
  k := abs(trunc( log2(errrounding[i]) + 53) ):
  tabk:=[op(tabk),k]:
  delta:= <Font opaque="false"> errapprox[i] + </Font>errrounding[i] + 2**(-100):
  tabdelta:=[op(tabdelta), delta]:
  e:= 1+ 2**(-51) + (2**(54+k)*delta)   /   ( (2**k-1) * (1-2**(-53)) ):
  tabrndcst:=[op(tabrndcst),evalf(e)]:
od:
save tabrndcst, tabdelta, "TEMPLOG/rndcstlog.m";</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">log2(1); tabrndcst;</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">
Xmax:=[2**(-5), 2**(-5), 2**(-5), 2**(-5), 2**(-4), 2**(-4), 2**(-4), 2**(-4)]:
tabed:=[]:
for i from 1 to 8 do
  e:=1+2**(55)*(errrounding[i,1] + 2**(-100)):
  Digits:=10:
  tabed:=[op(tabed),evalf(e)]:
  Digits:=150:
od:
tabed;</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group></Section><Section collapsed="true"><Title><Text-field layout="Heading 2" style="Heading 2">Coefficient output</Text-field></Title><Group><Input><Text-field layout="_pstyle47" prompt="&gt; " style="_cstyle16">read "TEMPLOG/Polylog.m"; read "TEMPLOG/errapproxlog.m"; read "TEMPLOG/parameterlog.m";read "TEMPLOG/rndcstlog.m";</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle35" style="Text"/></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">filename:="TEMPLOG/log_fast.h":<Font opaque="false">
fd:=fopen(filename, WRITE, TEXT):

fprintf(fd, "#include \"crlibm.h\"\n#include \"crlibm_private.h\"\n");

fprintf(fd, "\n/*File generated by maple/coef_log.mw*/\n");

fprintf(fd, "\n\#define SQRT_2 1.4142135623730950489e0 \n\n");
fprintf(fd, "\n#ifdef WORDS_BIGENDIAN\n");
fprintf(fd, "\db_number const ln2hi = {{0x3FE62E42, 0xFEFA39EF}};\n");
fprintf(fd, "db_number const ln2lo = {{0x3C7ABC9E, 0x3B39803F}};\n"):
fprintf(fd, "db_number const two52 = {{0x43300000, 0x00000000}};\n"):
fprintf(fd, "#else\ndb_number const ln2hi = {{0xFEFA39EF, 0x3FE62E42}};\n");
fprintf(fd, "db_number const ln2lo = {{0x3B39803F, 0x3C7ABC9E}};\n"):
fprintf(fd, "db_number const two52 = {{0x00000000, 0x43300000}};\n"):
fprintf(fd, "#endif\n\n"):</Font>

# THE POLYNOMIALS

npol:=nops(Plist):
n:=2:  # the degree from which we want two doubles

fprintf(fd,"#ifdef WORDS_BIGENDIAN\n"):
for isbig from 1 to 0 by -1 do

  if(isbig=0) then
    fprintf(fd,"#else\n"):
  fi;

  # Write middle table

  fprintf(fd, "db_number const middle[%d] =\n{\n",npol);
  for i from 1 to 7 do
    printendian(fd,midI[i],isbig);
    fprintf(fd," ,\n"):
  od:
  printendian(fd,midI[8],isbig):
  fprintf(fd, "\n};\n\n"):

  #Write poly_log_fast_h

  deg:=degree(Plist[1]):
  fprintf(fd,"db_number const poly_log_fast_h[%d][%d] =\n{\n", npol, deg+1):
  for k from 1 to 7 do<Font italic="false" size="12" underline="false">
    fprintf(fd," /* polynomial %d */\n{\n",k);</Font>
    for j from 0 to 12 do
      coef:=coeff(Plist[k],x,j):
      printendian(fd,coef,isbig):
      fprintf(fd," ,\n"):
    od:
    coef:=coeff(Plist[k],x,13):
    printendian(fd,coef,isbig):
    fprintf(fd, "\n},\n");
  od: <Font italic="false" size="12" underline="false">
  fprintf(fd," /* polynomial %d */\n{\n",8):</Font>
  for j from 0 to 12 do
    coef:=coeff(Plist[8],x,j):
    printendian(fd,coef,isbig):
    fprintf(fd," ,\n"):
  od:
  coef:=coeff(Plist[8],x,13):
  printendian(fd,coef,isbig):
  fprintf(fd, "\n}\n};\n\n"):

  #Write poly_log_fast_l

  fprintf(fd,"db_number const poly_log_fast_l[%d][%d] =\n{\n",npol,n):
  for k from 1 to 8 do
    <Font italic="false" size="12" underline="false">fprintf(fd," /* polynomial %d */\n{\n",k):

    coef:=hi_lo(coeff(Plist[k],x,0)):</Font>
    printendian(fd, coef[2], isbig):
    fprintf(fd," ,\n"):<Font italic="false" size="12" underline="false">
    coef:=hi_lo(coeff(Plist[k],x,1)):</Font>
    printendian(fd, coef[2], isbig):
    if(k&lt;8) then
      fprintf(fd, "\n},\n"):
    fi:
  od:
  fprintf(fd,"\n}\n};\n\n"):

od:<Font opaque="false">
fprintf(fd,"#endif\n\n\n"):


 
fprintf(fd,"/* Constants for rounding  */\n"):
fprintf(fd,"double const delta[%d] =\n{\n",npol):
for k from 1 to 7 do
   fprintf(fd,"%1.20e, \n",tabdelta[k]):
od:
fprintf(fd,"%1.20e\n};\n\n",tabdelta[k]):

fprintf(fd,"double const rncst[%d] =\n{\n",npol):
for k from 1 to 7 do
  fprintf(fd,"%1.20f, \n",tabrndcst[k]):
od:
fprintf(fd,"%1.20f\n};\n\n",tabrndcst[k]):</Font>
fclose(fd):
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group></Section><Section collapsed="true"><Title><Text-field firstindent="0.0" layout="Heading 2" leftmargin="0.0" linespacing="0.0" rightmargin="0.0" style="Heading 2"><Font encoding="ISO8859-1" executable="false" foreground="[0,0,0]" italic="false" underline="false">DEBUG, CALCUL du polyn\364me, coeff apres coeff</Font></Text-field></Title><Group><Input><Text-field layout="_pstyle36" prompt="&gt; " style="_cstyle10">read "parameterlog.m";
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">read "procedures.m";
read "Polylog.m";</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle35" style="Text">Valeurs du debuggueur</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle47" prompt="&gt; " style="_cstyle16">debug1:=Hexa2ieee(["3ff1078f","1da3ee1b"]):
debug2:=Hexa2ieee(["3ff11adb","35a43279"]):
debug3:=Hexa2ieee(["3ff2f3dd","5f33e4ad"]):
debug4:=Hexa2ieee(["3ff2fa98","c7deeb8e"]):
debug5:=Hexa2ieee(["4002fe57","89bc59a6"]):</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle80" style="_pstyle80"><Font encoding="ISO8859-1">R\351alise le calcul du polynome tel qu'il est calcul\351 sur ordinateur : param\350tres d'entr\351e, variable enter et entier i.. </Font>
</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle81" prompt="&gt; " style="ParagraphStyle8"><Font style="_cstyle14">compaccuracy:=proc(enter, i)
local pol, Expo, nb, nb2, res, Ph, Pl, reshi, reslo, resfinal:
global midI, Plist:

pol:=Plist[i+1]:
Expo:=trunc(log(enter)/log(2.));
nb:=enter/(2**(Expo)):
if(nb&gt;evalf(sqrt(2))) then 
  Expo:= Expo +1;
  nb:= nb/2. ;
fi;
nb2:= nb - midI[i+1]:
print(nb2);

res:=coeff(pol,x,13):
for j from 12 to 2 by -1 do
  res := nearest(res*nb2):
  res :=nearest(res+coeff(pol,x,j)):
od:

Ph,Pl:=hi_lo(res*nb2):
print(ieee2Hexa(Ph));

reshi,reslo:=hi_lo(Ph+Pl + coeff(pol,x,1)):
print(ieee2Hexa(reshi));

Ph,Pl:=hi_lo((reshi+reslo)*nb2):
print(ieee2Hexa(Ph));

reshi,reslo:=hi_lo(Ph+Pl + coeff(pol,x,0)):
print(ieee2Hexa(reshi));</Font><Font italic="false" size="12" style="_cstyle13" underline="false">

resfinal:=evalf(hi_lo(reshi+reslo+Expo*log(2.)));
ieee2Hexa(resfinal);</Font>
end proc;</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">compaccuracy(debug2,4);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Group><Input><Text-field layout="_pstyle80" style="_pstyle80"><Font encoding="ISO8859-1">Proc\351dure qui calcule le r\351sultat du polyn\364me en pr\351cision infinie avec arrondi IEEE \340 la fin:</Font>
</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle82" prompt="&gt; " style="_cstyle14">infaccuracy:=proc(enter, i)
local pol, Expo, nb, nb2, res, resfinal:
global midI, Plist:

pol:=Plist[i+1]:
Expo:=trunc(log(enter)/log(2.)):
nb:=enter/(2**Expo):
if(nb &gt; evalf(sqrt(2))) then 
  Expo:= Expo +1;
  nb:= nb/2. ;
fi;
nb2:= nb - midI[i+1];
ieee2Hexa(nb2);

res:=coeff(pol,x,14):

for j from 13 to 0 by -1 do
  res := res*nb2:
  res := res + coeff(pol,x,j):
od:
res;
print(ieee2Hexa(res));

resfinal:= evalf(Expo*log(2.)+res);
print(ieee2Hexa(resfinal));
end proc;</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">infaccuracy(debug2, 4);</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle35" style="Text">Calcul de la fonction log de maple:</Text-field></Input></Group><Group><Input><Text-field layout="_pstyle47" prompt="&gt; " style="_cstyle16">ieee2Hexa(evalf(log(debug2)));
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group></Section></Section><Text-field layout="Normal" style="Text"/><Text-field/></Worksheet>
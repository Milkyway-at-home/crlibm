#######################################################################
# This file is part of the crlibm library, and is distributed under
# the  LGPL.
# To use:
# restart; read "log-de.mpl";
Digits := 100:

interface(quiet=true):

read "common-procedures.mpl":
read "double-extended.mpl":
mkdir("TEMPLOG"):


log2h,log2l := hiloExt(log(2)):


L := 7: # number of bits used to address the table

MAXINDEX    := round(2^L * (sqrt(2)-1)):

for i from 0 to MAXINDEX-1 do
    center[i] := 1 + i*2^(-L):
    r[i] :=  round(evalf(  (1/center[i]) * 2^(10))) / (2^(10));

od:
for i from MAXINDEX to 2^L do
    # y has been divided by two
    center[i]:=(1 + i*2^(-L)) / 2:
    r[i] :=  round(evalf(  (1/center[i]) * 2^(10))) / (2^(10));
od:

for i from 0 to 2^L do
    (logirh[i], logirl[i]) := hiloExt(-log(r[i])):
od:

#Computation of ZMax
zmax:=0:
for i from 0 to MAXINDEX-1 do
    _x := center[i] + 2^(-L-1) :
    _z := abs(_x*r[i]-1) :
    if(_z>zmax) then zmax := _z: fi:
    _x := center[i] - 2^(-L-1) :
    _z := abs(_x*r[i]-1) :
    if(_z>zmax) then zmax := _z: fi:
od:


for i from MAXINDEX to 2^L do
    _x := center[i] + 2^(-L-2) :
    _z := abs(_x*r[i]-1) :
    if(_z>zmax) then zmax := _z: fi:
    _x := center[i] - 2^(-L-2) :
    _z := abs(_x*r[i]-1) :
    if(_z>zmax) then zmax := _z: fi:
od:

printf("  zmax = 2^(%2f)\n", log2(zmax) ) :

PolyDegreeAccurate:=14:

printf("Computing the polynomial for accurate phase (this may take some time...)\n"):
pe:= x  * numapprox[minimax](  log(1+x)/x,  x=-zmax..zmax,  [PolyDegreeAccurate-1,0], 1 ,  'delta_approx'):
log2(delta_approx):



MaxDegreeDDE:=8:  #

polyAccurate := polyExact2Ext(pe, MaxDegreeDDE):
#delta_approx := numapprox[infnorm](polyAccurate-log(1+x), x=-zmax..zmax):
epsilon_approx_accurate := numapprox[infnorm]( 1-polyAccurate/log(1+x), x=-zmax..zmax):
printf("   approximation error for the accurate phase is 2^(%2f)\n", log2(epsilon_approx_accurate) ) :


PolyDegreeQuick:=7: # On peut faire 6 pour les grands exposants. A voir

if(1+1=3) then
# Here we tried to use the polynomial from the accurate phase for the
# quick one.  This loses 7 bits of precision compared to a clean minimax, meaning
# one degree more. Better do two polynomials. To investigate some day,
# there must be a polynomial that does both.

#truncated to PolyDegreeQuick and to DE. We use the fact that series(p)=p
polyQuick := convert(series(polyExact2Ext(polyAccurate, 0), x=0, PolyDegreeQuick+1), polynom):
#delta_approx := numapprox[infnorm](polyAccurate-log(1+x), x=-zmax..zmax):
epsilon_approx := numapprox[infnorm]( 1-polyQuick/log(1+x), x=-zmax..zmax):
printf("   approximation error for the quick phase is 2^(%2f)\n", log2(epsilon_approx) ) ;
fi:


polyQuick:= polyExact2Ext(x  * numapprox[minimax](  log(1+x)/x,  x=-zmax..zmax,  [PolyDegreeQuick-1,0], 1 ,  'delta_approx'), 0):
epsilon_approx_quick := numapprox[infnorm]( 1-polyQuick/log(1+x), x=-zmax..zmax):
printf("   approximation rel error for the quick phase is 2^(%2f)\n", log2(epsilon_approx_quick) ) :
delta_approx_quick := numapprox[infnorm]( polyQuick-log(1+x), x=-zmax..zmax):
printf("   approximation abs error for the quick phase is 2^(%2f)\n", log2(delta_approx_quick) ) :





filename:="TEMPLOG/log-de.h":
fd:=fopen(filename, WRITE, TEXT):

fprintf(fd, "/*File generated by maple/log-de.mpl*/\n\n"):

  fprintf(fd, "#if defined(CRLIBM_TYPECPU_X86) || defined(CRLIBM_TYPECPU_AMD64)\n\n"):
  fprintf(fd, "  /* Coefficients are read directly from the array thanks to the following macros */ \n"):
  for i from PolyDegreeQuick to 1 by -1 do
    fprintf(fd, "#define c%d  c[%d]\n", i, PolyDegreeQuick-i):
  od:
  for i from PolyDegreeAccurate to 1 by -1 do
    fprintf(fd, "#define c%dh  ch[%d]\n", i, PolyDegreeAccurate-i):
  od:

  for i from MaxDegreeDDE-1 to 1 by -1 do
    fprintf(fd, "#define c%dl  cl[%d]\n", i, MaxDegreeDDE-1-i):
  od:
  fprintf(fd, "#define PREFETCH_POLY_ACCURATE \n"):
  fprintf(fd, "\n#else /* not(defined(CRLIBM_TYPECPU_X86) || defined(CRLIBM_TYPECPU_AMD64)),\n   assuming Itanium, otherwise we shouldn't be there */ \n\n"):
  fprintf(fd, "#define PREFETCH_POLY_QUICK "):
  for i from PolyDegreeQuick to 1 by -1 do
    fprintf(fd, "c%d=c[%d]; ", i, PolyDegreeQuick-i):
  od:
  fprintf(fd, "\n#define PREFETCH_POLY_ACCURATE "):
  for i from PolyDegreeAccurate to 1 by -1 do
    fprintf(fd, "c%dh=ch[%d]; ", i, PolyDegreeAccurate-i):
    if i mod 4 =0 then  fprintf(fd, "\\\n        "): fi:
  od:
  fprintf(fd, "\\\n        "):
  for i from MaxDegreeDDE-1 to 1 by -1 do
    fprintf(fd, "c%dl=cl[%d]; ", i, MaxDegreeDDE-1-i):
  od:

  fprintf(fd, "\n#endif /* defined(CRLIBM_TYPECPU_X86) || defined(CRLIBM_TYPECPU_AMD64) */ \n\n"):

  # Various constants
  fprintf(fd, "#define L        %d\n", L):
  fprintf(fd, "#define MAXINDEX %d\n", MAXINDEX):
  fprintf(fd, "static const long double log2h  = %1.50eL ;\n", log2h):
  fprintf(fd, "static const long double log2l  = %1.50eL ;\n", log2l):
  fprintf(fd, "static const long double two64 = %1.50eL ;\n", evalf(2^64)):

  # The polynomials
  #  polynomial for quick phase
#  for i from PolyDegreeQuick to 1 by -1 do
#    fprintf(fd, "static const long double c%d =    %1.50eL ;\n", i, coeff(polyQuick,x,i)):
#  od:
   fprintf(fd, "static const long double c[%d] =  {\n",PolyDegreeQuick):
   for i from PolyDegreeQuick to 1 by -1 do
     fprintf(fd, "   /* c%d  = */ %1.50eL, \n", i, coeff(polyQuick,x,i)):
   od:
  fprintf(fd, "}; \n \n"):

  #  polynomial for accurate phase
  #  polynomial for accurate phase
  fprintf(fd, "static const long double ch[%d] =  {\n",PolyDegreeAccurate):
   for i from PolyDegreeAccurate to 1 by -1 do
     (ch, cl) := hiloExt(coeff(polyAccurate,x,i)):
     fprintf(fd, "   /* ch%d  = */ %1.50eL, \n", i, ch):
   od:
  fprintf(fd, "}; \n \n"):

  fprintf(fd, "static const long double cl[%d] =  {\n", MaxDegreeDDE):
  for i from MaxDegreeDDE-1 to 1 by -1 do
     (ch, cl) := hiloExt(coeff(polyAccurate,x,i)):
     fprintf(fd, "   /* cl%d  = */ %1.50eL, \n", i, cl):
   od:
  fprintf(fd, "}; \n \n"):


  # The tables


  fprintf(fd, "typedef struct rri_tag {long double logirh; float r; long double logirl; } rri ;  \n"):
  fprintf(fd, "static const rri argredtable[%d] = {\n", 2^L+1):
  for i from 0 to 2^L do
      fprintf(fd, "  { \n"):
      fprintf(fd, "    %1.50eL, /* logirh[%d] */ \n", logirh[i], i):
      fprintf(fd, "    %1.50eL,   /* r[%d] */ \n", r[i], i):
      fprintf(fd, "    %1.50eL, /* logirl[%d] */ \n", logirl[i], i):
      fprintf(fd, "  } "):
      if(i<2^L) then  fprintf(fd, ", \n"): fi
  od:
fprintf(fd, "}; \n \n"):

fclose(fd):

printf("----DONE---\n") :


# Usage: You need to set the constants. Running the log-de.mpl Maple script
# should create the required sed files and give the command to run.
# Example   sed -f ../maple/TEMPLOG/log-de_0.sed log-de.gappa | ~/gappa/src/gappa 


# NOTATION CONVENTION 
# Variables that correspond to double-precision variables in the code begin with a small letter
# Other variables begin with a capital letter.
# Variables that will be replaced with Maple-computed constants begin with an underscore
# Otherwise avoid underscores as they are painful to carry on to LaTeX :)

@IEEEdouble = float<ieee_64,ne>;
@IEEEext = float<x86_80,ne>;

# polynomial coefficients, computed by Maple
c1 = IEEEext(_c1);
c2 = IEEEext(_c2);
c3 = IEEEext(_c3);
c4 = IEEEext(_c4);
c5 = IEEEext(_c5);
c6 = IEEEext(_c6);
c7 = IEEEext(_c7);
log2h = IEEEext(_log2h);
log2l  = IEEEext(_log2l);
r     = IEEEext(_r);
logirh = IEEEext(_logirh);
logirl = IEEEext(_logirl);


# Transcription of the code, NOT using FMA
z2   IEEEext= z*z;    
p67  IEEEext= c6 + z*c7;       
p45  IEEEext= c4 + z*c5;      
p23  IEEEext= c2 + z*c3;    
p01  IEEEext= logirh + z*c1;
z4   IEEEext= z2*z2;  
p47  IEEEext= p45 + z2*p67;    
p03  IEEEext= p01 + z2*p23; 
p07  IEEEext= p03 + z4*p47;
logz IEEEext= p07 + E*log2h;

#---------- What this code is supposed to approximate
# Exact mathematical definition of the log
Mlogz = Log1pz + Logir + E*Mlog2;

#############   Now come auxiliary definitions
Log2hl = log2h + log2l;
Logirhl = logirh + logirl;

# Give the polynomial in Estrin form (no need to transcribe the intermediate steps)
# Since the argument reduction is exact, Mz = z.
Mz2 = z*z;
Mz4 = Mz2*Mz2;
P07  =  ( (logirh+z*c1) + Mz2*(c2+z*c3) )     + Mz4*( (c4+z*c5) + Mz2*(c6+z*c7)  ); 

Alogz = P07 + E*Mlog2;



PolyLog1pz = z*c1 + Mz2*(c2+z*c3) + Mz4*( (c4+z*c5) + Mz2*(c6+z*c7)  );

epsilon = (logz - Mlogz)/Mlogz;
epsilon1 = (logz - Alogz)/Alogz;
epsilon2 = (Alogz - Mlogz)/Mlogz;

{
(E in [1,61]) # \/ E in [-1024,-1])
/\    z in [-_zmax, _zmax] 
/\  Log2hl - Mlog2    in [-1b-129, 1b-129] 
/\  Logirhl - Logir in [-1b-129, 1b-129]  
#/\  (PolyLog1pz - Log1pz)/Log1pz in [-_epsilonApproxQuick, _epsilonApproxQuick]
/\  (PolyLog1pz - Log1pz) in [-_deltaApproxQuick, _deltaApproxQuick]
->
epsilon in ? #[-1b-62, 1b-62]
/\ logz-Mlogz in ?
/\ Mlogz in ?
/\ epsilon1 in ?
/\ epsilon2 in ?
}

# Trivialities
logirh - Logir ->  (logirh +logirl -Logir) - logirl;
log2h-Mlog2  -> ((log2h + log2l) - Mlog2) - log2l;
Mlog2  -> (log2h + log2l) - ((log2h + log2l) - Mlog2);
Logir -> logirh + ((logirl - (logirh +logirl -Logir)));
Mlogz   -> Alogz - (Alogz-Mlogz);


#logz - Mlogz -> (logz - Alogz) + (Alogz - Mlogz); 
epsilon -> epsilon1 + epsilon2 + epsilon1*epsilon2;


epsilon2 ->  ((logirh-Logir) + (PolyLog1pz  - Log1pz))    / Mlogz;

# argl, oublie l'erreur d'arrondi au debut d'epsilon1
epsilon1 -> ((p07 - P07)/(E * Mlog2) + (log2h - Mlog2)/Mlog2) / (1 + P07 / (E * Mlog2));

Alogz - Mlogz -> (logirh-Logir) + (PolyLog1pz  - Log1pz);

#Log1pz  -> (Log1pz - PolyLog1pz) + PolyLog1pz;  

#Logir ->   (Logir - Logirhl) + Logirhl;  
